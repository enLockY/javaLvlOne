import java.util.Random;
import java.util.Scanner;

public class Main {
    public static int sizeField = 5;
    public static int winDot = 4;
    public static char dotEmpty = '-';
    public static char dotPlayer = 'X';
    public static char dotComp = 'O';
    public static char [] [] map;
    public static Scanner scanner = new Scanner(System.in);
    public static Random random = new Random();
    public static void main (String args []) {
        System.out.println("Добро пожаловать!");
        System.out.println("Сыграем в крестики-нолики!");
        mapInit();
        mapPrint();
        while (true) {
            playerMove();
            mapPrint();
            if (fullMap()){
                System.out.println("Ничья!");
                break;
            }
            if (checkWin(dotPlayer)){
                System.out.println("Игрок победил!");
                break;
            }
            compMove();
            mapPrint();
            if (fullMap()){
                System.out.println("Ничья!");
                break;
            }
            if (checkWin(dotComp)){
                System.out.println("Копьютер победил!");
                break;
            }
        }
    }
    public static void mapInit () {
        map = new char[sizeField][sizeField];
        for (int i = 0; i <sizeField ; i++) {
            for (int j = 0; j <sizeField ; j++) {
                map [i] [j] = dotEmpty;
            }
        }
    }
    public static void mapPrint() {
        System.out.println("==Upading==");
            for (int i = 0; i <= sizeField ; i++) {
                System.out.print(i + " ");
            }
            System.out.println();
            for (int i = 0; i < sizeField ; i++) {
                System.out.print(i + 1 + " ");
                for (int j = 0; j <sizeField ; j++) {
                    System.out.print(map [i] [j] + " ");
                }
                System.out.println();
            }
        }
    public static void playerMove() {
        int x, y;
        do {
            System.out.println(String.format("Введите координаты хода в формате X, Y (от 1 до %s). Х=", sizeField));
            x = scanner.nextInt () - 1;
            System.out.println(String.format("Введите координаты хода в формате X, Y (от 1 до %s). Y=", sizeField));
            y = scanner.nextInt () - 1;
        }
        while (!checkPlayerMove(x, y));
        map [x] [y] = dotPlayer;
    }
    public static boolean checkPlayerMove (int x, int y) {
        if ( x < 0 || x >= sizeField || y < 0 || y >= sizeField) {
            System.out.println(String.format("Поля X=%s, Y=%s не существует, введите заново:", x+1, y+1));
            return false;
        }
        if (map [x][y] == dotEmpty) return true;
        System.out.println(String.format("Поле X=%s, Y=%s уже занято!", x+1,y+1));
        return false;
    }
    public static void compMove() {
        int x, y;
        do {
            x = random.nextInt(sizeField);
            y = random.nextInt(sizeField);
        }
        while (!checkCompMove(x, y));
        map [x] [y] = dotComp;
    }
    public static boolean checkCompMove (int x, int y) {
        if (map [x][y] == dotEmpty) return true;
        return false;
    }
    public static boolean fullMap () {
        for (int i = 0; i <sizeField ; i++) {
            for (int j = 0; j <sizeField ; j++) {
                if (map [i] [j] == dotEmpty) return false;
            }
        }
        return true;
    }
    public static boolean checkWinLanes (char x, int offsetX, int offsetY) {
        boolean cols, rows;
        for (int col=offsetX; col<winDot+offsetX; col++) {
            cols = true;
            rows = true;
            for (int row=offsetY; row<winDot+offsetY; row++) {
                cols &= (map[col][row] == x);
                rows &= (map[row][col] == x);
            }
            if (cols || rows) return true;
        }
        return false;
    }
    public static boolean checkWinDiagonal (char x, int offsetX, int offsexY) {
        boolean toright, toleft;
        toright = true;
        toleft = true;
        for (int i=offsetX; i<winDot+offsetX; i++) {
                toright &= (map[i][i] == x);
                toleft &= (map[5-i-1][i] == x);
        }
        if (toright || toleft) return true;
        return false;
    }
    public static boolean checkWin(char x) {
        for (int col=0; col<2; col++) {
            for (int row=0; row<2; row++) {
                if (checkWinLanes(x, col, row) || checkWinDiagonal(x, col, row)) return true;
            }
        }
        return false;
    }
}
